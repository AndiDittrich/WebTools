<?php
    $title = 'TextFilter';
    $subtitle = 'Apply <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank">Javascript Regular Expressions</a> online to arbitrary text.';
    include('layout/header.phtml');
?>
    <div class="container">
        <p>
            <button type="button" class="btn btn-large btn-success pull-right" id="start">Run <span class="glyphicon glyphicon-console"></span></button>
            <button type="button" class="btn btn-large btn-default pull-right" id="examples">Example <span class="glyphicon glyphicon-blackboard"></span></button>
        </p>
        <hr />

        <div class="alert alert-danger alert-dismissible" id="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <strong>Invalid Regex Rule: </strong> <code class="txt"></code>
        </div>

        <h3 class="left">Regex <small>expression &gt; modifier &gt; replace</small></h3>
        <textarea class="form-control" rows="10" id="rules"></textarea>

        <hr />
        <h3>Input <small>multiline text</small></h3>
        <textarea class="form-control" rows="10" id="textInput"></textarea>


        <h3>Output <small>filtered text</small></h3>
        <textarea class="form-control" rows="10" id="textOutput"></textarea>
    </div>

    <?php include('layout/footer.phtml') ?>

    <script type="text/javascript">

        var showError = (function(msg){
            var el = document.id('alert');
            el.getElement('.txt').set('text', msg);
            el.setStyle('display', 'block');
        });

        // apply rules
        var process = (function(text, rules){
            // convert linebreaks; drop empty lines
            text = text.replace(/\r\n/g, "\n").replace(/^\s*$/gm, '').replace(/\n+/g, "\n");
            rules = rules.replace(/\r\n/g, "\n").replace(/^\s*$/gm, '').replace(/\n+/g, "\n").split("\n");

            Array.each(rules, function(rule){
                // empty ?

                // comment found ?
                if (rule && rule.substring(0, 2) == '--'){
                    return;
                }

                // match regex|modifier|replace
                var m = /^(.*?) >([ gmiy]*) > (.*?)$/g.exec(rule);

                // check length
                if (m == null || m.length != 4){
                    showError(rule);
                    return;
                }

                // create new regex from string
                var expr = new RegExp(m[1], m[2].trim());

                // check expr
                if (!expr){
                    showError(rule);
                }

                // apply regex
                text = text.replace(expr, m[3]);
            });

            return text;
        });

        // show examples
        document.id('examples').addEvent('click', function(){
            document.id('textInput').set('value', document.id('exampleInput').get('html').trim());
            document.id('rules').set('value', document.id('exampleRegex').get('html').trim());
        });

        // run filter onclick
        document.id('start').addEvent('click', function(){
            document.id('alert').setStyle('display', 'none');
            document.id('textOutput').set('value', process(document.id('textInput').get('value'), document.id('rules').get('value')));
        });

        // show initial exmaple data ?
        window.addEvent('load', function(){
            if (document.id('textInput').get('value').length == 0){
                document.id('examples').fireEvent('click');
            }
        });

        // alert dismiss
        document.getElements('.alert-dismissible').each(function(el){
            el.getElement('button.close').addEvent('click', function(){
                el.setStyle('display', 'none');
            });
        });
    </script>

<script type="text/template" id="exampleRegex">
-- Example: First list column to CSV
-- Note - exactly 1 space around the divider " > " is required!

-- Extract the first column
^(\S+)\s+.*$ > gm > $1

-- Replace Linebreaks by , (to CSV)
\n > g > ,
</script>

<script type="text/template" id="exampleInput">
green   0x00ff00
red     0xff0000
blue    0x0000ff
orange  0xcccc00
grey    0xc0c0c0
black   0x000000
</script>

</body>
</html>